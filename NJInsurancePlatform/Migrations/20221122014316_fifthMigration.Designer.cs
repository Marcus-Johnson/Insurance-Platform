// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NJInsurancePlatform.Data;

#nullable disable

namespace NJInsurancePlatform.Migrations
{
    [DbContext(typeof(InsuranceCorpDbContext))]
    [Migration("20221122014316_fifthMigration")]
    partial class fifthMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a7ca7932-95f8-4198-bd73-0d7dc3f1420e",
                            ConcurrencyStamp = "4413ecf9-c87e-4062-9dbf-705ea1d16238",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1f6191fc-6ab0-4d8b-8795-fe9ffad47ba5",
                            ConcurrencyStamp = "d021d442-e207-4421-90ca-d06b9ab1ec9c",
                            Name = "Beneficiary",
                            NormalizedName = "BENEFICIARY"
                        },
                        new
                        {
                            Id = "d78c4067-009c-4552-bd91-2351f1c4a0a8",
                            ConcurrencyStamp = "27cb0409-9d5c-4648-b59e-36913e56fcc6",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "25577c99-b693-4183-8c68-3e1bdcebd303",
                            ConcurrencyStamp = "f9c9e090-66eb-4b30-86f3-eb3d0c7ee0e6",
                            Name = "Pending",
                            NormalizedName = "PENDING"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "a7ca7932-95f8-4198-bd73-0d7dc3f1420e"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb7",
                            RoleId = "d78c4067-009c-4552-bd91-2351f1c4a0a8"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb8",
                            RoleId = "1f6191fc-6ab0-4d8b-8795-fe9ffad47ba5"
                        },
                        new
                        {
                            UserId = "b4cd1b2f-59bc-4408-b8e1-680f9797925c",
                            RoleId = "d78c4067-009c-4552-bd91-2351f1c4a0a8"
                        },
                        new
                        {
                            UserId = "de219bb6-f7e3-4efd-9fb8-f27d2cae3923",
                            RoleId = "d78c4067-009c-4552-bd91-2351f1c4a0a8"
                        },
                        new
                        {
                            UserId = "a6812865-5cef-4d6f-acfe-e2b231ec07c9",
                            RoleId = "d78c4067-009c-4552-bd91-2351f1c4a0a8"
                        },
                        new
                        {
                            UserId = "125dbdc6-1ee7-42e4-b95b-41d9d3796e88",
                            RoleId = "d78c4067-009c-4552-bd91-2351f1c4a0a8"
                        },
                        new
                        {
                            UserId = "ab59cf90-ee4f-4f1b-8d23-d588adfc3e9f",
                            RoleId = "1f6191fc-6ab0-4d8b-8795-fe9ffad47ba5"
                        },
                        new
                        {
                            UserId = "0307e8f3-6e35-4482-beb0-557d5e067602",
                            RoleId = "1f6191fc-6ab0-4d8b-8795-fe9ffad47ba5"
                        },
                        new
                        {
                            UserId = "40e86f87-2521-46a8-920e-588f30e019c4",
                            RoleId = "1f6191fc-6ab0-4d8b-8795-fe9ffad47ba5"
                        },
                        new
                        {
                            UserId = "5e151217-a523-42ce-b5c4-57480c9b9d56",
                            RoleId = "1f6191fc-6ab0-4d8b-8795-fe9ffad47ba5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Beneficiary", b =>
                {
                    b.Property<Guid>("BeneficiaryMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<Guid?>("TransactionMUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BeneficiaryMUID");

                    b.HasIndex("TransactionMUID");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Bill", b =>
                {
                    b.Property<Guid>("BillMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MinimumPayment")
                        .HasColumnType("float");

                    b.Property<DateTime>("PolicyDueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BillMUID");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            BillMUID = new Guid("f46090ed-d574-4456-8e18-97150ff885ed"),
                            Balance = 799.34000000000003,
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3063),
                            MinimumPayment = 123.98999999999999,
                            PolicyDueDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3060),
                            PolicyMUID = new Guid("a61a15af-6a7d-4e82-9659-c5003721f5ea"),
                            Status = "status"
                        },
                        new
                        {
                            BillMUID = new Guid("417a8279-0227-43c4-8504-c4396860ada0"),
                            Balance = 509.33999999999997,
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3068),
                            MinimumPayment = 283.99000000000001,
                            PolicyDueDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3067),
                            PolicyMUID = new Guid("abdafd4a-48ff-4f1a-bcc6-fd3dd2c659a5"),
                            Status = "status"
                        },
                        new
                        {
                            BillMUID = new Guid("c28330de-a718-465b-9772-5b28ad6395e8"),
                            Balance = 109.34,
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3072),
                            MinimumPayment = 129.09,
                            PolicyDueDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3071),
                            PolicyMUID = new Guid("67bb56de-01c9-42e2-b066-eea2c082f06f"),
                            Status = "status"
                        },
                        new
                        {
                            BillMUID = new Guid("9b7d532c-62a8-4a8d-96d9-6a7a80b118d4"),
                            Balance = 278.33999999999997,
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3076),
                            MinimumPayment = 449.08999999999997,
                            PolicyDueDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3075),
                            PolicyMUID = new Guid("46c76123-4e2c-4cce-95fa-0646268c5b1d"),
                            Status = "status"
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Claim", b =>
                {
                    b.Property<Guid>("ClaimMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimUserDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CustomerMUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfClaim")
                        .HasColumnType("datetime2");

                    b.Property<string>("PolicyMUID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClaimMUID");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentEmployer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CurrentZipcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimaryPolicyHolder")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("CustomerMUID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Faq", b =>
                {
                    b.Property<Guid>("FaqMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FaqMUID");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.GroupRoom", b =>
                {
                    b.Property<Guid>("GroupMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.HasKey("GroupMUID");

                    b.ToTable("GroupRooms");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.GroupRoomMessage", b =>
                {
                    b.Property<Guid>("GroupRoomMessageMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupRoomMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<Guid>("SenderMUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupRoomMessageMUID");

                    b.ToTable("GroupRoomMessages");

                    b.HasData(
                        new
                        {
                            GroupRoomMessageMUID = new Guid("82ba35e1-0c52-4f91-8ff3-7ba15a87c237"),
                            GroupRoomMUID = new Guid("f4f42d43-4d51-43a9-b398-5430131efd2a"),
                            Message = "Hello, Can you please Help Me?",
                            SenderMUID = new Guid("d9ef788c-a3f8-48b3-92ce-804170aba836")
                        },
                        new
                        {
                            GroupRoomMessageMUID = new Guid("7a9ff0a2-6386-4094-8ae8-9240611eef7a"),
                            GroupRoomMUID = new Guid("80d2744e-2de6-47cc-97d1-05f8a0794f6c"),
                            Message = "yes, How Can I Help you?",
                            SenderMUID = new Guid("a7071f27-db08-47fb-a05a-0a7da44b44c4")
                        },
                        new
                        {
                            GroupRoomMessageMUID = new Guid("e857e40b-d4d6-45dc-912f-4be6fc749c2d"),
                            GroupRoomMUID = new Guid("7e5319b1-4285-4811-bf88-c8542ac4bfa1"),
                            Message = "I have a question About My Policy",
                            SenderMUID = new Guid("a7071f27-db08-47fb-a05a-0a7da44b44c4")
                        },
                        new
                        {
                            GroupRoomMessageMUID = new Guid("4db427d8-8084-4987-9783-ef1154a0627b"),
                            GroupRoomMUID = new Guid("858efa88-5226-47e5-8bd0-80546b2f469d"),
                            Message = "Sure, What would you like to know?",
                            SenderMUID = new Guid("93fa9038-9c45-42cf-993b-fc3d15764f18")
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BillMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CardExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("CheckImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CheckNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DebitOrCredit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutingNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("PaymentMUID");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentMUID = new Guid("d3bfa2b2-a707-412f-9c4d-cbf1ec275693"),
                            AccountNumber = "2345643",
                            AdditionalInfo = "Additional info",
                            Amount = 123.98999999999999,
                            BankName = "Spring Savings",
                            BillMUID = new Guid("f46090ed-d574-4456-8e18-97150ff885ed"),
                            CardExpireDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3104),
                            CardNumber = "123498732",
                            CheckImage = "check Image",
                            CheckNumber = 123,
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3107),
                            DebitOrCredit = "debit",
                            PaidDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3099),
                            PayerFirstName = "Jillian",
                            PayerLastName = "Flowers",
                            PaymentMethod = "visa",
                            RoutingNumber = "2345432",
                            ZipCode = "12345"
                        },
                        new
                        {
                            PaymentMUID = new Guid("0b8e18c5-0b17-4bc1-b2a3-00abe6fb5e72"),
                            AccountNumber = "2345643",
                            AdditionalInfo = "Additional info",
                            Amount = 234.88999999999999,
                            BankName = "Peoples Savings",
                            BillMUID = new Guid("417a8279-0227-43c4-8504-c4396860ada0"),
                            CardExpireDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3116),
                            CardNumber = "123498732",
                            CheckImage = "check Image",
                            CheckNumber = 345,
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3118),
                            DebitOrCredit = "credit",
                            PaidDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3113),
                            PayerFirstName = "Fred",
                            PayerLastName = "Sanders",
                            PaymentMethod = "mastercard",
                            RoutingNumber = "2345432",
                            ZipCode = "12345"
                        },
                        new
                        {
                            PaymentMUID = new Guid("0fc63b41-88b2-4ad9-9035-0951611d62ae"),
                            AccountNumber = "2345643",
                            AdditionalInfo = "Additional info",
                            Amount = 563.99000000000001,
                            BankName = "Bank of Nova Scotia",
                            BillMUID = new Guid("c28330de-a718-465b-9772-5b28ad6395e8"),
                            CardExpireDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3122),
                            CardNumber = "123498732",
                            CheckImage = "check Image",
                            CheckNumber = 4532,
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3124),
                            DebitOrCredit = "credit",
                            PaidDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3120),
                            PayerFirstName = "Phillis",
                            PayerLastName = "McMahon",
                            PaymentMethod = "visa",
                            RoutingNumber = "2345432",
                            ZipCode = "12345"
                        },
                        new
                        {
                            PaymentMUID = new Guid("0b73fbd0-eb85-42c4-a634-e8ee78d81218"),
                            AccountNumber = "2345643",
                            AdditionalInfo = "Additional info",
                            Amount = 58.990000000000002,
                            BankName = "Bank of the Oranges",
                            BillMUID = new Guid("9b7d532c-62a8-4a8d-96d9-6a7a80b118d4"),
                            CardExpireDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3129),
                            CardNumber = "123498732",
                            CheckImage = "check Image",
                            CheckNumber = 9870,
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3131),
                            DebitOrCredit = "credit",
                            PaidDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3126),
                            PayerFirstName = "katherine",
                            PayerLastName = "Rivera",
                            PaymentMethod = "visa",
                            RoutingNumber = "2345432",
                            ZipCode = "12345"
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Policy", b =>
                {
                    b.Property<Guid>("PolicyMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AnnualLimitOfCoverage")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double?>("Deductible")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("NameOfPolicy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("OutOfPocketLimit")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PolicyEnd_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PolicyNumber")
                        .HasColumnType("int");

                    b.Property<string>("PolicyOwner")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("PolicyPaidOffAmount")
                        .HasColumnType("float");

                    b.Property<bool>("PolicyPaymentisDue")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PolicyStart_Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("PolicyTotalAmount")
                        .HasColumnType("float");

                    b.HasKey("PolicyMUID");

                    b.ToTable("Policies");

                    b.HasData(
                        new
                        {
                            PolicyMUID = new Guid("a61a15af-6a7d-4e82-9659-c5003721f5ea"),
                            AnnualLimitOfCoverage = 14999.99,
                            Deductible = 100.25,
                            NameOfPolicy = "Dental Gold",
                            OutOfPocketLimit = 999.99000000000001,
                            Pending = false,
                            PolicyEnd_Date = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(2868),
                            PolicyNumber = 1234,
                            PolicyOwner = "Patrick Leon",
                            PolicyPaidOffAmount = 0.0,
                            PolicyPaymentisDue = false,
                            PolicyStart_Date = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(2805),
                            PolicyTotalAmount = 35000.0
                        },
                        new
                        {
                            PolicyMUID = new Guid("abdafd4a-48ff-4f1a-bcc6-fd3dd2c659a5"),
                            AnnualLimitOfCoverage = 14999.99,
                            Deductible = 100.25,
                            NameOfPolicy = "Health Platinum",
                            OutOfPocketLimit = 999.99000000000001,
                            Pending = false,
                            PolicyEnd_Date = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(2874),
                            PolicyNumber = 4567,
                            PolicyOwner = "Eric Daley",
                            PolicyPaidOffAmount = 0.0,
                            PolicyPaymentisDue = false,
                            PolicyStart_Date = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(2872),
                            PolicyTotalAmount = 35000.0
                        },
                        new
                        {
                            PolicyMUID = new Guid("67bb56de-01c9-42e2-b066-eea2c082f06f"),
                            AnnualLimitOfCoverage = 14999.99,
                            Deductible = 100.25,
                            NameOfPolicy = "Eye Emarald",
                            OutOfPocketLimit = 999.99000000000001,
                            Pending = false,
                            PolicyEnd_Date = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(2879),
                            PolicyNumber = 78910,
                            PolicyOwner = "Nikosi Thom",
                            PolicyPaidOffAmount = 0.0,
                            PolicyPaymentisDue = false,
                            PolicyStart_Date = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(2878),
                            PolicyTotalAmount = 35000.0
                        },
                        new
                        {
                            PolicyMUID = new Guid("46c76123-4e2c-4cce-95fa-0646268c5b1d"),
                            AnnualLimitOfCoverage = 14999.99,
                            Deductible = 100.25,
                            NameOfPolicy = "Eye Emarald",
                            OutOfPocketLimit = 999.99000000000001,
                            Pending = false,
                            PolicyEnd_Date = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(2884),
                            PolicyNumber = 769564,
                            PolicyOwner = "Leona wilson",
                            PolicyPaidOffAmount = 0.0,
                            PolicyPaymentisDue = false,
                            PolicyStart_Date = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(2882),
                            PolicyTotalAmount = 35000.0
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isPaymentComplete")
                        .HasColumnType("bit");

                    b.HasKey("TransactionMUID");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionMUID = new Guid("76098a5e-bcda-46be-9cf3-a19f24d14018"),
                            CustomerMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb"),
                            PaymentAmount = 1199.78,
                            PaymentDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3028),
                            PolicyMUID = new Guid("a61a15af-6a7d-4e82-9659-c5003721f5ea"),
                            isPaymentComplete = true
                        },
                        new
                        {
                            TransactionMUID = new Guid("530f62a1-8730-4784-bb71-a257136dd9f6"),
                            CustomerMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1"),
                            PaymentAmount = 2109.7800000000002,
                            PaymentDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3031),
                            PolicyMUID = new Guid("abdafd4a-48ff-4f1a-bcc6-fd3dd2c659a5"),
                            isPaymentComplete = true
                        },
                        new
                        {
                            TransactionMUID = new Guid("f752a2a0-7300-42ba-beab-dc65992ca945"),
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            PaymentAmount = 109.08,
                            PaymentDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3033),
                            PolicyMUID = new Guid("67bb56de-01c9-42e2-b066-eea2c082f06f"),
                            isPaymentComplete = false
                        },
                        new
                        {
                            TransactionMUID = new Guid("3287bca8-d9dc-4f75-94ca-227cfb4c72da"),
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            PaymentAmount = 189.05000000000001,
                            PaymentDate = new DateTime(2022, 11, 21, 20, 43, 16, 13, DateTimeKind.Local).AddTicks(3038),
                            PolicyMUID = new Guid("46c76123-4e2c-4cce-95fa-0646268c5b1d"),
                            isPaymentComplete = false
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BeneficiaryMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentEmployer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentState")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CurrentZipcode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimaryPolicyHolder")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SSN")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab5780d7-7a52-4519-8784-e0280345ad8c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKYeTIH8mq0c+rjNcmZtNOn/+KZKv12ICSY62kakuoCTkK+VtZRZPoe49z9vT3VzEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86d1fe0d-2edd-441e-97fa-72807e357f91",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            Active = false,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "admin",
                            IsPrimaryPolicyHolder = false
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c25aa18-fc5c-4782-9815-ba3a67fdac97",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "CUSTOMER",
                            PasswordHash = "AQAAAAEAACcQAAAAEO4Ir9R0LxGujzrH9IE20S3o30tW2CvMMdKtnZU5MovJrCYhyjEvhqzoG9BVD9PRow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75269e6c-07b7-4442-aad8-5024304e278f",
                            TwoFactorEnabled = false,
                            UserName = "customer",
                            Active = false,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "customer",
                            IsPrimaryPolicyHolder = false
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40dd4f92-c30f-4716-8424-ac51a260cdc5",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BENEFICIARY",
                            PasswordHash = "AQAAAAEAACcQAAAAEBpPppybYWP+F75MIo6dYagQ0JRCbur2QFIRNz/9MDuSLHiG+O5ZgVVLC0ATJK5KYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4aaa8e06-cc5e-446c-bf31-45b9e01f616b",
                            TwoFactorEnabled = false,
                            UserName = "beneficiary",
                            Active = false,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "beneficiary",
                            IsPrimaryPolicyHolder = false
                        },
                        new
                        {
                            Id = "b4cd1b2f-59bc-4408-b8e1-680f9797925c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11e61691-9d56-43b9-9de5-59be1a566cdf",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PATO",
                            PasswordHash = "AQAAAAEAACcQAAAAED227LsuK2Vbdf++g3LF7Ek8iMQNIqPSuAeav/BNH3jlA45sp1GgiSXh55MZ+mWDqA==",
                            PhoneNumber = "2019878709",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59c9f39e-7607-4d3e-b042-4b9da36c9664",
                            TwoFactorEnabled = false,
                            UserName = "Pato",
                            Active = true,
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 17, DateTimeKind.Local).AddTicks(1771),
                            CurrentAddress = "123 Elm street",
                            CurrentCity = "Milwaukee",
                            CurrentEmployer = "Alphabet Corp",
                            CurrentState = "Wisconsin",
                            CurrentZipcode = "7897678",
                            CustomerMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "PatrickL@mymail.com",
                            FirstName = "Patrick",
                            Gender = "male",
                            IsPrimaryPolicyHolder = true,
                            LastName = "Leon",
                            LicenseNumber = "39kh8087hf",
                            PolicyMUID = new Guid("a61a15af-6a7d-4e82-9659-c5003721f5ea"),
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "de219bb6-f7e3-4efd-9fb8-f27d2cae3923",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "057be2d2-3c19-4ad1-b49b-9f929b49a087",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ERICD@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK7jDPJbapEPsfv8XpaxFSJ0FsIGgP6dD35Led8CKlHCGLzmbPQdUXupFZCRDGNs+Q==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "472b7557-758f-4e07-8381-d330cfc35b9f",
                            TwoFactorEnabled = false,
                            UserName = "EricD@mymail.com",
                            Active = true,
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 18, DateTimeKind.Local).AddTicks(2254),
                            CurrentAddress = "456 main street",
                            CurrentCity = "Baltimore",
                            CurrentEmployer = "Xillon Co",
                            CurrentState = "Maryland",
                            CurrentZipcode = "7897678",
                            CustomerMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "EricD@mymail.com",
                            FirstName = "Eric",
                            Gender = "male",
                            IsPrimaryPolicyHolder = true,
                            LastName = "Daley",
                            LicenseNumber = "39kh8087hf",
                            PolicyMUID = new Guid("abdafd4a-48ff-4f1a-bcc6-fd3dd2c659a5"),
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "a6812865-5cef-4d6f-acfe-e2b231ec07c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6a170a0-f641-494a-a8ba-6ea0c3780f18",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "NIKOSIT@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENblfMBaGCz/yc0wNnLSq9taYYY7gBbzsJk8nLgwcVGskywa8f6TI2SjnntkMFvTpg==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17b1d1ce-fe3c-470d-98da-cab882cd42f8",
                            TwoFactorEnabled = false,
                            UserName = "NikosiT@mymail.com",
                            Active = true,
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 19, DateTimeKind.Local).AddTicks(2762),
                            CurrentAddress = "789 Grove street",
                            CurrentCity = "Rockville",
                            CurrentEmployer = "techumseh International",
                            CurrentState = "Maryland",
                            CurrentZipcode = "7897678",
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "NikosiT@mymail.com",
                            FirstName = "Nikosi",
                            Gender = "female",
                            IsPrimaryPolicyHolder = true,
                            LastName = "Thom",
                            LicenseNumber = "39kh8087hf",
                            PolicyMUID = new Guid("67bb56de-01c9-42e2-b066-eea2c082f06f"),
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "125dbdc6-1ee7-42e4-b95b-41d9d3796e88",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcbf8af9-73e7-4c80-bb1c-ba5f876bda83",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "LEONAW@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK9RRasitIeCUDwY9WROId6FaNrPzpqE5d1G0IIz4cYMgvUCNxPMhIIJxE290B0WLQ==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a343ab54-b392-4cef-b1dc-242d1dd421c0",
                            TwoFactorEnabled = false,
                            UserName = "LeonaW@mymail.com",
                            Active = true,
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 20, DateTimeKind.Local).AddTicks(3087),
                            CurrentAddress = "3464 Brinkly street",
                            CurrentCity = "Gathersburg",
                            CurrentEmployer = "Brimson distributers",
                            CurrentState = "Maryland",
                            CurrentZipcode = "7897678",
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "LeonaW@mymail.com",
                            FirstName = "Leona",
                            Gender = "female",
                            IsPrimaryPolicyHolder = true,
                            LastName = "Wilson",
                            LicenseNumber = "39kh8087hf",
                            PolicyMUID = new Guid("46c76123-4e2c-4cce-95fa-0646268c5b1d"),
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "ab59cf90-ee4f-4f1b-8d23-d588adfc3e9f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26b186dd-87d9-42de-836b-08e43ed60cbb",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ANDREAB@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOBibAJsWosA8rGbgXlF9uLA6guvzjJXy1msMGZGKV+J4KM/SLSPk6b9n7/PFRTIYQ==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd68f782-598e-4918-946e-42fdd912dc3c",
                            TwoFactorEnabled = false,
                            UserName = "AndreaB@mymail.com",
                            Active = true,
                            BeneficiaryMUID = new Guid("6808f1f0-47c1-4136-b775-b1f6ffc541fd"),
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 21, DateTimeKind.Local).AddTicks(3531),
                            CustomerMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "AndreaB@mymail.com",
                            FirstName = "Andrea",
                            Gender = "female",
                            IsPrimaryPolicyHolder = false,
                            LastName = "Bogataw",
                            LicenseNumber = "39kh8087hf",
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "0307e8f3-6e35-4482-beb0-557d5e067602",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3dea3981-67b9-4418-b6bb-5a07f3c62ccd",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "CYNTHIAS@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJwfGMKnisgtgwPYmIBeWv6T54LfdpRTuF8pfnXAou8XmCueRkt0t4xr0RwIz6OJRA==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76e4ff2c-0d50-49d4-a75b-74a84a150be1",
                            TwoFactorEnabled = false,
                            UserName = "CynthiaS@mymail.com",
                            Active = true,
                            BeneficiaryMUID = new Guid("54d5eae1-ee39-4f2d-8535-5f610d2e1cff"),
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 22, DateTimeKind.Local).AddTicks(3837),
                            CustomerMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "CynthiaS@mymail.com",
                            FirstName = "Cynthia",
                            Gender = "female",
                            IsPrimaryPolicyHolder = false,
                            LastName = "Smithers",
                            LicenseNumber = "39k8ew8087hf",
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "40e86f87-2521-46a8-920e-588f30e019c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29ee84d7-7c82-4893-a07d-c6d5d9d72e65",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BRITNEYG@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHZpIEpxjZ72ZMjsbDwQ/VLbPam+amluUZhIeA/ijL4egulkOycbxLe7f47o1TbpSQ==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79a48203-391f-439c-9dce-bb2a28aabed7",
                            TwoFactorEnabled = false,
                            UserName = "BritneyG@mymail.com",
                            Active = true,
                            BeneficiaryMUID = new Guid("78d9cd41-acde-48fc-baa9-29b5065af159"),
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 23, DateTimeKind.Local).AddTicks(5525),
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "BritneyG@mymail.com",
                            FirstName = "Brittney",
                            Gender = "female",
                            IsPrimaryPolicyHolder = false,
                            LastName = "Giles",
                            LicenseNumber = "39k8ew8087hf",
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "5e151217-a523-42ce-b5c4-57480c9b9d56",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75e5e574-935a-4435-9201-413d8f652b00",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JOANAM@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOst5gzAI3PrHVHRiSZYqI4x9RB5xC3cu2fqHm9RT17ap3yKfAmyFzNBTrc2/IreIg==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee993911-3ea0-4e28-8815-1beb3f8f9504",
                            TwoFactorEnabled = false,
                            UserName = "JoanaM@mymail.com",
                            Active = true,
                            BeneficiaryMUID = new Guid("fa75877d-66a1-4f63-b8fa-d2cdb59fbdd1"),
                            CreatedDate = new DateTime(2022, 11, 21, 20, 43, 16, 24, DateTimeKind.Local).AddTicks(6100),
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "JoanaM@mymail.com",
                            FirstName = "Joana",
                            Gender = "female",
                            IsPrimaryPolicyHolder = false,
                            LastName = "Martin",
                            LicenseNumber = "39k8ew8087hf",
                            SSN = "123456789"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Beneficiary", b =>
                {
                    b.HasOne("NJInsurancePlatform.Models.Transaction", null)
                        .WithMany("ListOfPolicyBeneficiariesMUIDs")
                        .HasForeignKey("TransactionMUID");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Transaction", b =>
                {
                    b.Navigation("ListOfPolicyBeneficiariesMUIDs");
                });
#pragma warning restore 612, 618
        }
    }
}
