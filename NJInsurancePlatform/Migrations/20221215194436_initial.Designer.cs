// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NJInsurancePlatform.Data;

#nullable disable

namespace NJInsurancePlatform.Migrations
{
    [DbContext(typeof(InsuranceCorpDbContext))]
    [Migration("20221215194436_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "40d8cba2-ee15-4c98-a2d8-fc8b08806dc4",
                            ConcurrencyStamp = "b4ff15a4-c9a5-4cf7-81a3-cefb2b5618ef",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ec1455ea-c8d3-41d1-a69c-e315ed953414",
                            ConcurrencyStamp = "bb4ba081-532c-4962-a2f4-64cb789ff6aa",
                            Name = "Beneficiary",
                            NormalizedName = "BENEFICIARY"
                        },
                        new
                        {
                            Id = "96cf8303-d6be-4d09-b3e0-3d155c72dafa",
                            ConcurrencyStamp = "3e040b6c-6e78-4290-b9cd-2d307b27640b",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "d54d8930-ed31-4bd9-95b6-063584db0477",
                            ConcurrencyStamp = "dfe48e32-e70f-4ed7-baf0-aa438cbdd2e2",
                            Name = "Pending",
                            NormalizedName = "PENDING"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "40d8cba2-ee15-4c98-a2d8-fc8b08806dc4"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb7",
                            RoleId = "96cf8303-d6be-4d09-b3e0-3d155c72dafa"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb8",
                            RoleId = "ec1455ea-c8d3-41d1-a69c-e315ed953414"
                        },
                        new
                        {
                            UserId = "94d0dd14-c313-438b-83a7-81049f1b6700",
                            RoleId = "96cf8303-d6be-4d09-b3e0-3d155c72dafa"
                        },
                        new
                        {
                            UserId = "641f4975-716c-4044-881a-c87c47dbabb4",
                            RoleId = "96cf8303-d6be-4d09-b3e0-3d155c72dafa"
                        },
                        new
                        {
                            UserId = "bac823cb-cd9d-406e-ab8a-5a4a3a5b48e7",
                            RoleId = "96cf8303-d6be-4d09-b3e0-3d155c72dafa"
                        },
                        new
                        {
                            UserId = "f47b79e0-41c8-4e1d-81c9-b30be4d8f3fd",
                            RoleId = "96cf8303-d6be-4d09-b3e0-3d155c72dafa"
                        },
                        new
                        {
                            UserId = "e294889f-47cc-4f11-9a0b-f90744aef3a4",
                            RoleId = "ec1455ea-c8d3-41d1-a69c-e315ed953414"
                        },
                        new
                        {
                            UserId = "0cc206d4-5991-4868-8d92-68da425eb1ff",
                            RoleId = "ec1455ea-c8d3-41d1-a69c-e315ed953414"
                        },
                        new
                        {
                            UserId = "1b4c4466-96e4-49ef-b5fa-754084adde43",
                            RoleId = "ec1455ea-c8d3-41d1-a69c-e315ed953414"
                        },
                        new
                        {
                            UserId = "8bb7ff9c-52db-4933-8815-c239fc708d5e",
                            RoleId = "ec1455ea-c8d3-41d1-a69c-e315ed953414"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Beneficiary", b =>
                {
                    b.Property<Guid>("BeneficiaryMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<Guid?>("TransactionMUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BeneficiaryMUID");

                    b.HasIndex("TransactionMUID");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Bill", b =>
                {
                    b.Property<Guid>("BillMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("MinimumPayment")
                        .HasColumnType("float");

                    b.Property<DateTime>("PolicyDueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BillMUID");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            BillMUID = new Guid("f46090ed-d574-4456-8e18-97150ff885ed"),
                            Balance = 799.34000000000003,
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3799),
                            CustomerMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb"),
                            MinimumPayment = 123.98999999999999,
                            PolicyDueDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3797),
                            PolicyMUID = new Guid("a61a15af-6a7d-4e82-9659-c5003721f5ea"),
                            Status = "Due"
                        },
                        new
                        {
                            BillMUID = new Guid("417a8279-0227-43c4-8504-c4396860ada0"),
                            Balance = 509.33999999999997,
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3805),
                            CustomerMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1"),
                            MinimumPayment = 283.99000000000001,
                            PolicyDueDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3803),
                            PolicyMUID = new Guid("abdafd4a-48ff-4f1a-bcc6-fd3dd2c659a5"),
                            Status = "Due"
                        },
                        new
                        {
                            BillMUID = new Guid("c28330de-a718-465b-9772-5b28ad6395e8"),
                            Balance = 109.34,
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3810),
                            CustomerMUID = new Guid("f71979e2-b649-4fbc-bc63-3bafa1d65176"),
                            MinimumPayment = 129.09,
                            PolicyDueDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3808),
                            PolicyMUID = new Guid("67bb56de-01c9-42e2-b066-eea2c082f06f"),
                            Status = "Due"
                        },
                        new
                        {
                            BillMUID = new Guid("9b7d532c-62a8-4a8d-96d9-6a7a80b118d4"),
                            Balance = 278.33999999999997,
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3814),
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            MinimumPayment = 449.08999999999997,
                            PolicyDueDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3812),
                            PolicyMUID = new Guid("46c76123-4e2c-4cce-95fa-0646268c5b1d"),
                            Status = "Due"
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Claim", b =>
                {
                    b.Property<Guid>("ClaimMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimUserDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CustomerMUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfClaim")
                        .HasColumnType("datetime2");

                    b.Property<string>("PolicyMUID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClaimMUID");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentEmployer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CurrentZipcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimaryPolicyHolder")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("CustomerMUID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Faq", b =>
                {
                    b.Property<Guid>("FaqMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FaqMUID");

                    b.ToTable("Faqs");

                    b.HasData(
                        new
                        {
                            FaqMUID = new Guid("d4d4c14c-2d9b-44a1-8740-277b0fda3b63"),
                            Answer = "Somerset, NJ",
                            Question = "Where Is our company based out of?"
                        },
                        new
                        {
                            FaqMUID = new Guid("c7b8af00-c276-4cf1-88ed-a697727fa6f6"),
                            Answer = "That is your initial role when you first register.  An Admin will approve your account and set you to your appropriate role.",
                            Question = "Why is my role listed as pending?"
                        },
                        new
                        {
                            FaqMUID = new Guid("25304522-7aea-4705-be98-0c3c962e3128"),
                            Answer = "Your policy must first be approved by an Admin, please check your policy again in a little while.",
                            Question = "Why is my policy listed as pending?"
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.GroupRoom", b =>
                {
                    b.Property<Guid>("GroupMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.HasKey("GroupMUID");

                    b.ToTable("GroupRooms");

                    b.HasData(
                        new
                        {
                            GroupMUID = new Guid("f4f42d43-4d51-43a9-b398-5430131efd2a"),
                            Name = "Nikosi's Group"
                        },
                        new
                        {
                            GroupMUID = new Guid("80d2744e-2de6-47cc-97d1-05f8a0794f6c"),
                            Name = "Eric's Group"
                        },
                        new
                        {
                            GroupMUID = new Guid("7e5319b1-4285-4811-bf88-c8542ac4bfa1"),
                            Name = "Leona's Group"
                        },
                        new
                        {
                            GroupMUID = new Guid("858efa88-5226-47e5-8bd0-80546b2f469d"),
                            Name = "Patrick's Group"
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.GroupRoomMessage", b =>
                {
                    b.Property<Guid>("GroupRoomMessageMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupRoomMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<Guid>("SenderMUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupRoomMessageMUID");

                    b.ToTable("GroupRoomMessages");

                    b.HasData(
                        new
                        {
                            GroupRoomMessageMUID = new Guid("82ba35e1-0c52-4f91-8ff3-7ba15a87c237"),
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3977),
                            FirstName = "Patrick",
                            GroupRoomMUID = new Guid("f4f42d43-4d51-43a9-b398-5430131efd2a"),
                            LastName = "Leon",
                            Message = "Hello, How Are you?",
                            SenderMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb")
                        },
                        new
                        {
                            GroupRoomMessageMUID = new Guid("7a9ff0a2-6386-4094-8ae8-9240611eef7a"),
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3981),
                            FirstName = "Eric",
                            GroupRoomMUID = new Guid("80d2744e-2de6-47cc-97d1-05f8a0794f6c"),
                            LastName = "Daley",
                            Message = "Good Morning!",
                            SenderMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1")
                        },
                        new
                        {
                            GroupRoomMessageMUID = new Guid("e857e40b-d4d6-45dc-912f-4be6fc749c2d"),
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3983),
                            FirstName = "Nikosi",
                            GroupRoomMUID = new Guid("7e5319b1-4285-4811-bf88-c8542ac4bfa1"),
                            LastName = "Thom",
                            Message = "I have a question About My Policy",
                            SenderMUID = new Guid("f71979e2-b649-4fbc-bc63-3bafa1d65176")
                        },
                        new
                        {
                            GroupRoomMessageMUID = new Guid("4db427d8-8084-4987-9783-ef1154a0627b"),
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3986),
                            FirstName = "Leona",
                            GroupRoomMUID = new Guid("858efa88-5226-47e5-8bd0-80546b2f469d"),
                            LastName = "Wilson",
                            Message = "Sure, What would you like to know?",
                            SenderMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce")
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BillMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTime>("CardExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("CheckImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CheckNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DebitOrCredit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutingNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("PaymentMUID");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentMUID = new Guid("d3bfa2b2-a707-412f-9c4d-cbf1ec275693"),
                            AccountNumber = "2345643",
                            AdditionalInfo = "Additional info",
                            Amount = 123.98999999999999,
                            BankName = "Spring Savings",
                            BillMUID = new Guid("f46090ed-d574-4456-8e18-97150ff885ed"),
                            CVV = "123",
                            CardExpireDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3907),
                            CardNumber = "123498732",
                            CheckImage = "check Image",
                            CheckNumber = 123,
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3911),
                            DebitOrCredit = "debit",
                            PaidDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3902),
                            PayerFirstName = "Jillian",
                            PayerLastName = "Flowers",
                            PaymentMethod = "visa",
                            RoutingNumber = "2345432",
                            ZipCode = "12345"
                        },
                        new
                        {
                            PaymentMUID = new Guid("0b8e18c5-0b17-4bc1-b2a3-00abe6fb5e72"),
                            AccountNumber = "2345643",
                            AdditionalInfo = "Additional info",
                            Amount = 234.88999999999999,
                            BankName = "Peoples Savings",
                            BillMUID = new Guid("417a8279-0227-43c4-8504-c4396860ada0"),
                            CVV = "123",
                            CardExpireDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3919),
                            CardNumber = "123498732",
                            CheckImage = "check Image",
                            CheckNumber = 345,
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3922),
                            DebitOrCredit = "credit",
                            PaidDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3916),
                            PayerFirstName = "Fred",
                            PayerLastName = "Sanders",
                            PaymentMethod = "mastercard",
                            RoutingNumber = "2345432",
                            ZipCode = "12345"
                        },
                        new
                        {
                            PaymentMUID = new Guid("0fc63b41-88b2-4ad9-9035-0951611d62ae"),
                            AccountNumber = "2345643",
                            AdditionalInfo = "Additional info",
                            Amount = 563.99000000000001,
                            BankName = "Bank of Nova Scotia",
                            BillMUID = new Guid("c28330de-a718-465b-9772-5b28ad6395e8"),
                            CVV = "123",
                            CardExpireDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3927),
                            CardNumber = "123498732",
                            CheckImage = "check Image",
                            CheckNumber = 4532,
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3929),
                            DebitOrCredit = "credit",
                            PaidDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3924),
                            PayerFirstName = "Phillis",
                            PayerLastName = "McMahon",
                            PaymentMethod = "visa",
                            RoutingNumber = "2345432",
                            ZipCode = "12345"
                        },
                        new
                        {
                            PaymentMUID = new Guid("0b73fbd0-eb85-42c4-a634-e8ee78d81218"),
                            AccountNumber = "2345643",
                            AdditionalInfo = "Additional info",
                            Amount = 58.990000000000002,
                            BankName = "Bank of the Oranges",
                            BillMUID = new Guid("9b7d532c-62a8-4a8d-96d9-6a7a80b118d4"),
                            CVV = "123",
                            CardExpireDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3933),
                            CardNumber = "123498732",
                            CheckImage = "check Image",
                            CheckNumber = 9870,
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3936),
                            DebitOrCredit = "credit",
                            PaidDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3931),
                            PayerFirstName = "katherine",
                            PayerLastName = "Rivera",
                            PaymentMethod = "visa",
                            RoutingNumber = "2345432",
                            ZipCode = "12345"
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Policy", b =>
                {
                    b.Property<Guid>("PolicyMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AnnualLimitOfCoverage")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<Guid>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Deductible")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("NameOfPolicy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("OutOfPocketLimit")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PolicyEnd_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PolicyOwner")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("PolicyPaidOffAmount")
                        .HasColumnType("float");

                    b.Property<bool>("PolicyPaymentisDue")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PolicyStart_Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("PolicyTotalAmount")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductMUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PolicyMUID");

                    b.ToTable("Policies");

                    b.HasData(
                        new
                        {
                            PolicyMUID = new Guid("a61a15af-6a7d-4e82-9659-c5003721f5ea"),
                            AnnualLimitOfCoverage = 14999.99,
                            CustomerMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb"),
                            Deductible = 100.25,
                            NameOfPolicy = "Dental Gold",
                            OutOfPocketLimit = 999.99000000000001,
                            Pending = false,
                            PolicyEnd_Date = new DateTime(2023, 12, 14, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3719),
                            PolicyOwner = "Patrick Leon",
                            PolicyPaidOffAmount = 0.0,
                            PolicyPaymentisDue = true,
                            PolicyStart_Date = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3688),
                            PolicyTotalAmount = 35000.0,
                            ProductMUID = new Guid("25952bce-ae01-421f-a91c-540523c40844")
                        },
                        new
                        {
                            PolicyMUID = new Guid("abdafd4a-48ff-4f1a-bcc6-fd3dd2c659a5"),
                            AnnualLimitOfCoverage = 14999.99,
                            CustomerMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1"),
                            Deductible = 100.25,
                            NameOfPolicy = "Health Platinum",
                            OutOfPocketLimit = 999.99000000000001,
                            Pending = false,
                            PolicyEnd_Date = new DateTime(2023, 12, 14, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3726),
                            PolicyOwner = "Eric Daley",
                            PolicyPaidOffAmount = 0.0,
                            PolicyPaymentisDue = true,
                            PolicyStart_Date = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3724),
                            PolicyTotalAmount = 35000.0,
                            ProductMUID = new Guid("f8ad14d7-9d2b-43b9-a6d8-41abfd704e7a")
                        },
                        new
                        {
                            PolicyMUID = new Guid("67bb56de-01c9-42e2-b066-eea2c082f06f"),
                            AnnualLimitOfCoverage = 14999.99,
                            CustomerMUID = new Guid("f71979e2-b649-4fbc-bc63-3bafa1d65176"),
                            Deductible = 100.25,
                            NameOfPolicy = "Eye Emarald",
                            OutOfPocketLimit = 999.99000000000001,
                            Pending = false,
                            PolicyEnd_Date = new DateTime(2023, 12, 14, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3731),
                            PolicyOwner = "Nikosi Thom",
                            PolicyPaidOffAmount = 0.0,
                            PolicyPaymentisDue = true,
                            PolicyStart_Date = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3729),
                            PolicyTotalAmount = 35000.0,
                            ProductMUID = new Guid("3051a56d-88f2-492c-aa2f-35010185a4c3")
                        },
                        new
                        {
                            PolicyMUID = new Guid("46c76123-4e2c-4cce-95fa-0646268c5b1d"),
                            AnnualLimitOfCoverage = 14999.99,
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            Deductible = 500.98000000000002,
                            NameOfPolicy = "Employee Individual Health",
                            OutOfPocketLimit = 2099.9899999999998,
                            Pending = false,
                            PolicyEnd_Date = new DateTime(2023, 12, 14, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3735),
                            PolicyOwner = "Leona wilson",
                            PolicyPaidOffAmount = 0.0,
                            PolicyPaymentisDue = true,
                            PolicyStart_Date = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3734),
                            PolicyTotalAmount = 150000.0,
                            ProductMUID = new Guid("118e88b0-58b6-43b1-a6c3-108b6e631c9b")
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.PolicyRequest", b =>
                {
                    b.Property<Guid>("RequestMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RequestMUID");

                    b.ToTable("PolicyRequests");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Product", b =>
                {
                    b.Property<Guid>("ProductMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AnnualLimitOfCoverage")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double?>("Deductible")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("OutOfPocketLimit")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double>("PolicyPaidOffAmount")
                        .HasColumnType("float");

                    b.Property<double>("PolicyTotalAmount")
                        .HasColumnType("float");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductMUID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductMUID = new Guid("25952bce-ae01-421f-a91c-540523c40844"),
                            AnnualLimitOfCoverage = 14999.99,
                            Deductible = 100.25,
                            Description = "Lorus Plorem enum taknut",
                            OutOfPocketLimit = 999.99000000000001,
                            PolicyPaidOffAmount = 0.0,
                            PolicyTotalAmount = 10000.0,
                            Price = 2343.0,
                            ProductName = "DentalGold"
                        },
                        new
                        {
                            ProductMUID = new Guid("f8ad14d7-9d2b-43b9-a6d8-41abfd704e7a"),
                            AnnualLimitOfCoverage = 25999.990000000002,
                            Deductible = 200.15000000000001,
                            Description = "Enum Zelgar Phlnnub nilsup",
                            OutOfPocketLimit = 999.99000000000001,
                            PolicyPaidOffAmount = 0.0,
                            PolicyTotalAmount = 150000.0,
                            Price = 3343.0,
                            ProductName = "Health Platinum"
                        },
                        new
                        {
                            ProductMUID = new Guid("3051a56d-88f2-492c-aa2f-35010185a4c3"),
                            AnnualLimitOfCoverage = 1345.99,
                            Deductible = 50.670000000000002,
                            Description = "Lorus Plorem enum taknut",
                            OutOfPocketLimit = 1200.45,
                            PolicyPaidOffAmount = 0.0,
                            PolicyTotalAmount = 2000.0,
                            Price = 789.0,
                            ProductName = "Eye Emerald"
                        },
                        new
                        {
                            ProductMUID = new Guid("118e88b0-58b6-43b1-a6c3-108b6e631c9b"),
                            AnnualLimitOfCoverage = 5345.9899999999998,
                            Deductible = 160.69,
                            Description = "Bupka ladna velnup halstus",
                            OutOfPocketLimit = 5600.4499999999998,
                            PolicyPaidOffAmount = 0.0,
                            PolicyTotalAmount = 100000.0,
                            Price = 1200.98,
                            ProductName = "Employee Individual Health"
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isPaymentComplete")
                        .HasColumnType("bit");

                    b.HasKey("TransactionMUID");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionMUID = new Guid("76098a5e-bcda-46be-9cf3-a19f24d14018"),
                            CustomerMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb"),
                            PaymentAmount = 1199.78,
                            PaymentDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3761),
                            PolicyMUID = new Guid("a61a15af-6a7d-4e82-9659-c5003721f5ea"),
                            isPaymentComplete = true
                        },
                        new
                        {
                            TransactionMUID = new Guid("530f62a1-8730-4784-bb71-a257136dd9f6"),
                            CustomerMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1"),
                            PaymentAmount = 2109.7800000000002,
                            PaymentDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3764),
                            PolicyMUID = new Guid("abdafd4a-48ff-4f1a-bcc6-fd3dd2c659a5"),
                            isPaymentComplete = true
                        },
                        new
                        {
                            TransactionMUID = new Guid("f752a2a0-7300-42ba-beab-dc65992ca945"),
                            CustomerMUID = new Guid("f71979e2-b649-4fbc-bc63-3bafa1d65176"),
                            PaymentAmount = 109.08,
                            PaymentDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3766),
                            PolicyMUID = new Guid("67bb56de-01c9-42e2-b066-eea2c082f06f"),
                            isPaymentComplete = false
                        },
                        new
                        {
                            TransactionMUID = new Guid("3287bca8-d9dc-4f75-94ca-227cfb4c72da"),
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            PaymentAmount = 189.05000000000001,
                            PaymentDate = new DateTime(2022, 12, 15, 14, 44, 35, 394, DateTimeKind.Local).AddTicks(3768),
                            PolicyMUID = new Guid("46c76123-4e2c-4cce-95fa-0646268c5b1d"),
                            isPaymentComplete = false
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BeneficiaryMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentEmployer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentState")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CurrentZipcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimaryPolicyHolder")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SSN")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4071b2d3-2fb6-42a7-8045-0fb90731c1e2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJuGRsoFp3TrX9+jA+QC5K4RUHSBnuld6sM6F3HRWyxO406wQ1UUCVzNu/csiusE3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7f5e3df-3f8c-4a9d-86c1-fe1e623248ca",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            Active = false,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "admin",
                            IsPrimaryPolicyHolder = false
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66d34537-2b0f-4655-8ce5-8108c2b1d36e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "CUSTOMER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMCyBL5Zr+7dArKjDJDOLBRPcO8cG8C+4/PhyYz7mRac4zgtO+0Xn+kBmmcWwGmGCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ab95a6b-a3da-4ed3-95cf-04e97d94d8a2",
                            TwoFactorEnabled = false,
                            UserName = "customer",
                            Active = false,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "customer",
                            IsPrimaryPolicyHolder = false
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5342e610-e1ee-4978-b6d2-2ab90d8dfbc5",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BENEFICIARY",
                            PasswordHash = "AQAAAAEAACcQAAAAEIBi/k3LzBDWc5teZj1W+OtTUP6uq1ivw38/FVRap5VPk55rxwUfYKeOu7bBlmTP1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05acaf29-3503-4787-ae18-957fa1d8387b",
                            TwoFactorEnabled = false,
                            UserName = "beneficiary",
                            Active = false,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "beneficiary",
                            IsPrimaryPolicyHolder = false
                        },
                        new
                        {
                            Id = "94d0dd14-c313-438b-83a7-81049f1b6700",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cac9d2c9-9ec2-43f6-9521-518d33e42267",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PATO",
                            PasswordHash = "AQAAAAEAACcQAAAAENN1i3QTh0cCa8UOGVdVHT5Yc8rwMe3qxyREqRP6KpeRstsc7lRmI/YmQEFuX08Rdg==",
                            PhoneNumber = "2019878709",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "62fda649-5f96-4983-9bc2-4a65dcab1885",
                            TwoFactorEnabled = false,
                            UserName = "Pato",
                            Active = true,
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 430, DateTimeKind.Local).AddTicks(6171),
                            CurrentAddress = "123 Elm street",
                            CurrentCity = "Milwaukee",
                            CurrentEmployer = "Alphabet Corp",
                            CurrentState = "Wisconsin",
                            CurrentZipcode = "7897678",
                            CustomerMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "PatrickL@mymail.com",
                            FirstName = "Patrick",
                            Gender = "male",
                            IsPrimaryPolicyHolder = true,
                            LastName = "Leon",
                            LicenseNumber = "39kh8087hf",
                            PolicyMUID = new Guid("a61a15af-6a7d-4e82-9659-c5003721f5ea"),
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "641f4975-716c-4044-881a-c87c47dbabb4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8dfc1e6b-8cf4-4b03-9d52-3ebfbe9aa71a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ERICD@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDS0HASLPhBUiwKXgQgcryZaw+0dN703WzVkzJFkQPQUkwunkgLvrYLEP00qTmNKqw==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "624e6957-5d7a-418a-bc3d-62b4c1b1d60d",
                            TwoFactorEnabled = false,
                            UserName = "EricD@mymail.com",
                            Active = true,
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 444, DateTimeKind.Local).AddTicks(3581),
                            CurrentAddress = "456 main street",
                            CurrentCity = "Baltimore",
                            CurrentEmployer = "Xillon Co",
                            CurrentState = "Maryland",
                            CurrentZipcode = "7897678",
                            CustomerMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "EricD@mymail.com",
                            FirstName = "Eric",
                            Gender = "male",
                            IsPrimaryPolicyHolder = true,
                            LastName = "Daley",
                            LicenseNumber = "39kh8087hf",
                            PolicyMUID = new Guid("abdafd4a-48ff-4f1a-bcc6-fd3dd2c659a5"),
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "bac823cb-cd9d-406e-ab8a-5a4a3a5b48e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a9785d3-9792-4e8f-8cf7-b86ab4d2cdc7",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "NIKOSIT@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOuqB59xzJeHZ1thhFpy5ILj6KRXk7IkZoKa919TIIJVXyLhENi8aLDs0nIvB6rtQQ==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7050bd07-798d-4279-8e4e-24dd9f1290a9",
                            TwoFactorEnabled = false,
                            UserName = "NikosiT@mymail.com",
                            Active = true,
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 454, DateTimeKind.Local).AddTicks(1158),
                            CurrentAddress = "789 Grove street",
                            CurrentCity = "Rockville",
                            CurrentEmployer = "techumseh International",
                            CurrentState = "Maryland",
                            CurrentZipcode = "7897678",
                            CustomerMUID = new Guid("f71979e2-b649-4fbc-bc63-3bafa1d65176"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "NikosiT@mymail.com",
                            FirstName = "Nikosi",
                            Gender = "female",
                            IsPrimaryPolicyHolder = true,
                            LastName = "Thom",
                            LicenseNumber = "39kh8087hf",
                            PolicyMUID = new Guid("67bb56de-01c9-42e2-b066-eea2c082f06f"),
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "f47b79e0-41c8-4e1d-81c9-b30be4d8f3fd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c128b25-b5c4-4c33-90c5-6c835e9b9c24",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "LEONAW@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPNI3Ixr156vzvODlJ2M20cLysYYxmaA3URNv/DX0//tgpb1UR0gOSx3TD0bveZJJA==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6589028e-3cec-4d52-bf94-8d82024fc098",
                            TwoFactorEnabled = false,
                            UserName = "LeonaW@mymail.com",
                            Active = true,
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 470, DateTimeKind.Local).AddTicks(5780),
                            CurrentAddress = "3464 Brinkly street",
                            CurrentCity = "Gathersburg",
                            CurrentEmployer = "Brimson distributers",
                            CurrentState = "Maryland",
                            CurrentZipcode = "7897678",
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "LeonaW@mymail.com",
                            FirstName = "Leona",
                            Gender = "female",
                            IsPrimaryPolicyHolder = true,
                            LastName = "Wilson",
                            LicenseNumber = "39kh8087hf",
                            PolicyMUID = new Guid("46c76123-4e2c-4cce-95fa-0646268c5b1d"),
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "e294889f-47cc-4f11-9a0b-f90744aef3a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12f0a81d-fa9a-4508-b67a-fd2d7c4ef5a3",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ANDREAB@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHuGwvTUrkDXHGeP0AIQZRNotelexK6PngwBzDDSzkHMs1oVHPOT0fwt2eNlrg9+Dw==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30c13f07-b016-4f42-8999-b33666070b7b",
                            TwoFactorEnabled = false,
                            UserName = "AndreaB@mymail.com",
                            Active = true,
                            BeneficiaryMUID = new Guid("6808f1f0-47c1-4136-b775-b1f6ffc541fd"),
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 485, DateTimeKind.Local).AddTicks(7292),
                            CustomerMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "AndreaB@mymail.com",
                            FirstName = "Andrea",
                            Gender = "female",
                            IsPrimaryPolicyHolder = false,
                            LastName = "Bogataw",
                            LicenseNumber = "39kh8087hf",
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "0cc206d4-5991-4868-8d92-68da425eb1ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb5c19ca-b0e3-4829-863f-88f9ba5067f8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "CYNTHIAS@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMp4oQBnxhjTqIWG+nMaR+dba2WJoPBJO2qXYlx+VKW/eApnDZwtLcaMSp4gNbDWHw==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9327ac2-9ada-487b-9ab6-ef28ee639642",
                            TwoFactorEnabled = false,
                            UserName = "CynthiaS@mymail.com",
                            Active = true,
                            BeneficiaryMUID = new Guid("54d5eae1-ee39-4f2d-8535-5f610d2e1cff"),
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 499, DateTimeKind.Local).AddTicks(127),
                            CustomerMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "CynthiaS@mymail.com",
                            FirstName = "Cynthia",
                            Gender = "female",
                            IsPrimaryPolicyHolder = false,
                            LastName = "Smithers",
                            LicenseNumber = "39k8ew8087hf",
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "1b4c4466-96e4-49ef-b5fa-754084adde43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee81b588-7201-4b1c-8bd3-4320812b5ecd",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BRITNEYG@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPUJmA9HJYe/VdUEBs7x9SWkq7cd9SiRQWYjCMAs3lsz6FLcOB9JHJ/xH2KFUUBdmg==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f4f150f-5bf5-4264-b461-65cb3d6f044a",
                            TwoFactorEnabled = false,
                            UserName = "BritneyG@mymail.com",
                            Active = true,
                            BeneficiaryMUID = new Guid("78d9cd41-acde-48fc-baa9-29b5065af159"),
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 508, DateTimeKind.Local).AddTicks(6462),
                            CustomerMUID = new Guid("f71979e2-b649-4fbc-bc63-3bafa1d65176"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "BritneyG@mymail.com",
                            FirstName = "Brittney",
                            Gender = "female",
                            IsPrimaryPolicyHolder = false,
                            LastName = "Giles",
                            LicenseNumber = "39k8ew8087hf",
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "8bb7ff9c-52db-4933-8815-c239fc708d5e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a5f7c9b-4980-4ed5-8287-0a2978534134",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JOANAM@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM+WaOUp/vTG65OV64T85aIT9OYZXx3W3pCUleLHjMAToZK4dsOS6BwcukpOmNu54g==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d7abd0e-0306-4100-af92-c97a3999a7cd",
                            TwoFactorEnabled = false,
                            UserName = "JoanaM@mymail.com",
                            Active = true,
                            BeneficiaryMUID = new Guid("fa75877d-66a1-4f63-b8fa-d2cdb59fbdd1"),
                            CreatedDate = new DateTime(2022, 12, 15, 14, 44, 35, 517, DateTimeKind.Local).AddTicks(6975),
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "JoanaM@mymail.com",
                            FirstName = "Joana",
                            Gender = "female",
                            IsPrimaryPolicyHolder = false,
                            LastName = "Martin",
                            LicenseNumber = "39k8ew8087hf",
                            SSN = "123456789"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Beneficiary", b =>
                {
                    b.HasOne("NJInsurancePlatform.Models.Transaction", null)
                        .WithMany("ListOfPolicyBeneficiariesMUIDs")
                        .HasForeignKey("TransactionMUID");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Transaction", b =>
                {
                    b.Navigation("ListOfPolicyBeneficiariesMUIDs");
                });
#pragma warning restore 612, 618
        }
    }
}
