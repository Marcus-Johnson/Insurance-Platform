// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NJInsurancePlatform.Data;

#nullable disable

namespace NJInsurancePlatform.Migrations
{
    [DbContext(typeof(InsuranceCorpDbContext))]
    [Migration("20221202145749_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "de8f69bf-23e2-4cd8-ab79-5248c31e4eae",
                            ConcurrencyStamp = "925a7736-9bbf-469d-9488-0281a15d88c4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "422d4e7c-5e6b-4e87-98b6-63f8111381e9",
                            ConcurrencyStamp = "511e9ea3-60c8-4241-aec7-c7de96ec7db7",
                            Name = "Beneficiary",
                            NormalizedName = "BENEFICIARY"
                        },
                        new
                        {
                            Id = "e7d78896-ddb6-46af-a773-0213a09ef40c",
                            ConcurrencyStamp = "f1bd2c99-aa95-4291-bc7d-36fc3a1da226",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "def4bb68-5cb2-4f44-9b09-28e85b0473f0",
                            ConcurrencyStamp = "d8498e48-c91e-46ae-97b8-d790a06c706b",
                            Name = "Pending",
                            NormalizedName = "PENDING"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "de8f69bf-23e2-4cd8-ab79-5248c31e4eae"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb7",
                            RoleId = "e7d78896-ddb6-46af-a773-0213a09ef40c"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb8",
                            RoleId = "422d4e7c-5e6b-4e87-98b6-63f8111381e9"
                        },
                        new
                        {
                            UserId = "8769b938-a65f-4141-9e40-70beca51e382",
                            RoleId = "e7d78896-ddb6-46af-a773-0213a09ef40c"
                        },
                        new
                        {
                            UserId = "477bef17-5d7a-4a10-b59f-b6b6ff801264",
                            RoleId = "e7d78896-ddb6-46af-a773-0213a09ef40c"
                        },
                        new
                        {
                            UserId = "e94548ba-dafc-44be-9e41-dc7d71b7c588",
                            RoleId = "e7d78896-ddb6-46af-a773-0213a09ef40c"
                        },
                        new
                        {
                            UserId = "5e7d78de-76fb-479e-a2e1-d8886e46b311",
                            RoleId = "e7d78896-ddb6-46af-a773-0213a09ef40c"
                        },
                        new
                        {
                            UserId = "4c26a4cf-1364-4ed6-b8e6-8e1e23c1794e",
                            RoleId = "422d4e7c-5e6b-4e87-98b6-63f8111381e9"
                        },
                        new
                        {
                            UserId = "161f8c40-6362-4725-b74d-21c627686d91",
                            RoleId = "422d4e7c-5e6b-4e87-98b6-63f8111381e9"
                        },
                        new
                        {
                            UserId = "2db7ddd2-579e-4975-870b-b111412db610",
                            RoleId = "422d4e7c-5e6b-4e87-98b6-63f8111381e9"
                        },
                        new
                        {
                            UserId = "9b0f37ab-5f26-41d0-b6d5-2b81b045b46f",
                            RoleId = "422d4e7c-5e6b-4e87-98b6-63f8111381e9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Beneficiary", b =>
                {
                    b.Property<Guid>("BeneficiaryMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<Guid?>("TransactionMUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BeneficiaryMUID");

                    b.HasIndex("TransactionMUID");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Bill", b =>
                {
                    b.Property<Guid>("BillMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MinimumPayment")
                        .HasColumnType("float");

                    b.Property<DateTime>("PolicyDueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BillMUID");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            BillMUID = new Guid("f46090ed-d574-4456-8e18-97150ff885ed"),
                            Balance = 799.34000000000003,
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1986),
                            MinimumPayment = 123.98999999999999,
                            PolicyDueDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1983),
                            PolicyMUID = new Guid("a61a15af-6a7d-4e82-9659-c5003721f5ea"),
                            Status = "status"
                        },
                        new
                        {
                            BillMUID = new Guid("417a8279-0227-43c4-8504-c4396860ada0"),
                            Balance = 509.33999999999997,
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1992),
                            MinimumPayment = 283.99000000000001,
                            PolicyDueDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1990),
                            PolicyMUID = new Guid("abdafd4a-48ff-4f1a-bcc6-fd3dd2c659a5"),
                            Status = "status"
                        },
                        new
                        {
                            BillMUID = new Guid("c28330de-a718-465b-9772-5b28ad6395e8"),
                            Balance = 109.34,
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1998),
                            MinimumPayment = 129.09,
                            PolicyDueDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1996),
                            PolicyMUID = new Guid("67bb56de-01c9-42e2-b066-eea2c082f06f"),
                            Status = "status"
                        },
                        new
                        {
                            BillMUID = new Guid("9b7d532c-62a8-4a8d-96d9-6a7a80b118d4"),
                            Balance = 278.33999999999997,
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2003),
                            MinimumPayment = 449.08999999999997,
                            PolicyDueDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2001),
                            PolicyMUID = new Guid("46c76123-4e2c-4cce-95fa-0646268c5b1d"),
                            Status = "status"
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Claim", b =>
                {
                    b.Property<Guid>("ClaimMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimUserDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CustomerMUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfClaim")
                        .HasColumnType("datetime2");

                    b.Property<string>("PolicyMUID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClaimMUID");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentEmployer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CurrentZipcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimaryPolicyHolder")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("CustomerMUID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Faq", b =>
                {
                    b.Property<Guid>("FaqMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FaqMUID");

                    b.ToTable("Faqs");

                    b.HasData(
                        new
                        {
                            FaqMUID = new Guid("104473af-8427-4d40-825f-867a318e1b75"),
                            Answer = "Somerset, NJ",
                            Question = "Where Is our company based out of?"
                        },
                        new
                        {
                            FaqMUID = new Guid("14870cdd-8987-45b2-8aef-39e32af04c83"),
                            Answer = "That is your initial role when you first register.  An Admin will approve your account and set you to your appropriate role.",
                            Question = "Why is my role listed as pending?"
                        },
                        new
                        {
                            FaqMUID = new Guid("d65cc7a0-1582-4501-b1fd-b01e96b17dcc"),
                            Answer = "Your policy must first be approved by an Admin, please check your policy again in a little while.",
                            Question = "Why is my policy listed as pending?"
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.GroupRoom", b =>
                {
                    b.Property<Guid>("GroupMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.HasKey("GroupMUID");

                    b.ToTable("GroupRooms");

                    b.HasData(
                        new
                        {
                            GroupMUID = new Guid("f4f42d43-4d51-43a9-b398-5430131efd2a"),
                            Name = "Nikosi's Group"
                        },
                        new
                        {
                            GroupMUID = new Guid("80d2744e-2de6-47cc-97d1-05f8a0794f6c"),
                            Name = "Eric's Group"
                        },
                        new
                        {
                            GroupMUID = new Guid("7e5319b1-4285-4811-bf88-c8542ac4bfa1"),
                            Name = "Leona's Group"
                        },
                        new
                        {
                            GroupMUID = new Guid("858efa88-5226-47e5-8bd0-80546b2f469d"),
                            Name = "Patrick's Group"
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.GroupRoomMessage", b =>
                {
                    b.Property<Guid>("GroupRoomMessageMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupRoomMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<Guid>("SenderMUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupRoomMessageMUID");

                    b.ToTable("GroupRoomMessages");

                    b.HasData(
                        new
                        {
                            GroupRoomMessageMUID = new Guid("82ba35e1-0c52-4f91-8ff3-7ba15a87c237"),
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2103),
                            FirstName = "Patrick",
                            GroupRoomMUID = new Guid("f4f42d43-4d51-43a9-b398-5430131efd2a"),
                            LastName = "Leon",
                            Message = "Hello, How Are you?",
                            SenderMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb")
                        },
                        new
                        {
                            GroupRoomMessageMUID = new Guid("7a9ff0a2-6386-4094-8ae8-9240611eef7a"),
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2108),
                            FirstName = "Eric",
                            GroupRoomMUID = new Guid("80d2744e-2de6-47cc-97d1-05f8a0794f6c"),
                            LastName = "Daley",
                            Message = "Good Morning!",
                            SenderMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1")
                        },
                        new
                        {
                            GroupRoomMessageMUID = new Guid("e857e40b-d4d6-45dc-912f-4be6fc749c2d"),
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2113),
                            FirstName = "Nikosi",
                            GroupRoomMUID = new Guid("7e5319b1-4285-4811-bf88-c8542ac4bfa1"),
                            LastName = "Thom",
                            Message = "I have a question About My Policy",
                            SenderMUID = new Guid("f71979e2-b649-4fbc-bc63-3bafa1d65176")
                        },
                        new
                        {
                            GroupRoomMessageMUID = new Guid("4db427d8-8084-4987-9783-ef1154a0627b"),
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2116),
                            FirstName = "Leona",
                            GroupRoomMUID = new Guid("858efa88-5226-47e5-8bd0-80546b2f469d"),
                            LastName = "Wilson",
                            Message = "Sure, What would you like to know?",
                            SenderMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce")
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BillMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTime>("CardExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("CheckImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CheckNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DebitOrCredit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutingNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("PaymentMUID");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentMUID = new Guid("d3bfa2b2-a707-412f-9c4d-cbf1ec275693"),
                            AccountNumber = "2345643",
                            AdditionalInfo = "Additional info",
                            Amount = 123.98999999999999,
                            BankName = "Spring Savings",
                            BillMUID = new Guid("f46090ed-d574-4456-8e18-97150ff885ed"),
                            CVV = "123",
                            CardExpireDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2032),
                            CardNumber = "123498732",
                            CheckImage = "check Image",
                            CheckNumber = 123,
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2036),
                            DebitOrCredit = "debit",
                            PaidDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2026),
                            PayerFirstName = "Jillian",
                            PayerLastName = "Flowers",
                            PaymentMethod = "visa",
                            RoutingNumber = "2345432",
                            ZipCode = "12345"
                        },
                        new
                        {
                            PaymentMUID = new Guid("0b8e18c5-0b17-4bc1-b2a3-00abe6fb5e72"),
                            AccountNumber = "2345643",
                            AdditionalInfo = "Additional info",
                            Amount = 234.88999999999999,
                            BankName = "Peoples Savings",
                            BillMUID = new Guid("417a8279-0227-43c4-8504-c4396860ada0"),
                            CVV = "123",
                            CardExpireDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2042),
                            CardNumber = "123498732",
                            CheckImage = "check Image",
                            CheckNumber = 345,
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2046),
                            DebitOrCredit = "credit",
                            PaidDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2039),
                            PayerFirstName = "Fred",
                            PayerLastName = "Sanders",
                            PaymentMethod = "mastercard",
                            RoutingNumber = "2345432",
                            ZipCode = "12345"
                        },
                        new
                        {
                            PaymentMUID = new Guid("0fc63b41-88b2-4ad9-9035-0951611d62ae"),
                            AccountNumber = "2345643",
                            AdditionalInfo = "Additional info",
                            Amount = 563.99000000000001,
                            BankName = "Bank of Nova Scotia",
                            BillMUID = new Guid("c28330de-a718-465b-9772-5b28ad6395e8"),
                            CVV = "123",
                            CardExpireDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2051),
                            CardNumber = "123498732",
                            CheckImage = "check Image",
                            CheckNumber = 4532,
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2054),
                            DebitOrCredit = "credit",
                            PaidDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2048),
                            PayerFirstName = "Phillis",
                            PayerLastName = "McMahon",
                            PaymentMethod = "visa",
                            RoutingNumber = "2345432",
                            ZipCode = "12345"
                        },
                        new
                        {
                            PaymentMUID = new Guid("0b73fbd0-eb85-42c4-a634-e8ee78d81218"),
                            AccountNumber = "2345643",
                            AdditionalInfo = "Additional info",
                            Amount = 58.990000000000002,
                            BankName = "Bank of the Oranges",
                            BillMUID = new Guid("9b7d532c-62a8-4a8d-96d9-6a7a80b118d4"),
                            CVV = "123",
                            CardExpireDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2060),
                            CardNumber = "123498732",
                            CheckImage = "check Image",
                            CheckNumber = 9870,
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2062),
                            DebitOrCredit = "credit",
                            PaidDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(2057),
                            PayerFirstName = "katherine",
                            PayerLastName = "Rivera",
                            PaymentMethod = "visa",
                            RoutingNumber = "2345432",
                            ZipCode = "12345"
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Policy", b =>
                {
                    b.Property<Guid>("PolicyMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AnnualLimitOfCoverage")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<Guid>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Deductible")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("NameOfPolicy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("OutOfPocketLimit")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PolicyEnd_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PolicyOwner")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("PolicyPaidOffAmount")
                        .HasColumnType("float");

                    b.Property<bool>("PolicyPaymentisDue")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PolicyStart_Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("PolicyTotalAmount")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductMUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PolicyMUID");

                    b.ToTable("Policies");

                    b.HasData(
                        new
                        {
                            PolicyMUID = new Guid("a61a15af-6a7d-4e82-9659-c5003721f5ea"),
                            AnnualLimitOfCoverage = 14999.99,
                            CustomerMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb"),
                            Deductible = 100.25,
                            NameOfPolicy = "Dental Gold",
                            OutOfPocketLimit = 999.99000000000001,
                            Pending = false,
                            PolicyEnd_Date = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1845),
                            PolicyOwner = "Patrick Leon",
                            PolicyPaidOffAmount = 0.0,
                            PolicyPaymentisDue = false,
                            PolicyStart_Date = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1808),
                            PolicyTotalAmount = 35000.0,
                            ProductMUID = new Guid("79b3d532-56bd-4ec8-811c-ade2445088cb")
                        },
                        new
                        {
                            PolicyMUID = new Guid("abdafd4a-48ff-4f1a-bcc6-fd3dd2c659a5"),
                            AnnualLimitOfCoverage = 14999.99,
                            CustomerMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1"),
                            Deductible = 100.25,
                            NameOfPolicy = "Health Platinum",
                            OutOfPocketLimit = 999.99000000000001,
                            Pending = false,
                            PolicyEnd_Date = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1855),
                            PolicyOwner = "Eric Daley",
                            PolicyPaidOffAmount = 0.0,
                            PolicyPaymentisDue = false,
                            PolicyStart_Date = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1852),
                            PolicyTotalAmount = 35000.0,
                            ProductMUID = new Guid("337e2116-7448-4d4c-84c1-7bef1fe8bfdb")
                        },
                        new
                        {
                            PolicyMUID = new Guid("67bb56de-01c9-42e2-b066-eea2c082f06f"),
                            AnnualLimitOfCoverage = 14999.99,
                            CustomerMUID = new Guid("f71979e2-b649-4fbc-bc63-3bafa1d65176"),
                            Deductible = 100.25,
                            NameOfPolicy = "Eye Emarald",
                            OutOfPocketLimit = 999.99000000000001,
                            Pending = false,
                            PolicyEnd_Date = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1861),
                            PolicyOwner = "Nikosi Thom",
                            PolicyPaidOffAmount = 0.0,
                            PolicyPaymentisDue = false,
                            PolicyStart_Date = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1859),
                            PolicyTotalAmount = 35000.0,
                            ProductMUID = new Guid("0ed8ff6d-fc5e-4a8f-ac54-109cdbeb27ea")
                        },
                        new
                        {
                            PolicyMUID = new Guid("46c76123-4e2c-4cce-95fa-0646268c5b1d"),
                            AnnualLimitOfCoverage = 14999.99,
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            Deductible = 500.98000000000002,
                            NameOfPolicy = "Employee Individual Health",
                            OutOfPocketLimit = 2099.9899999999998,
                            Pending = false,
                            PolicyEnd_Date = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1867),
                            PolicyOwner = "Leona wilson",
                            PolicyPaidOffAmount = 0.0,
                            PolicyPaymentisDue = false,
                            PolicyStart_Date = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1865),
                            PolicyTotalAmount = 150000.0,
                            ProductMUID = new Guid("b980874f-4978-4c19-b941-c66f1df8052d")
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.PolicyRequest", b =>
                {
                    b.Property<Guid>("RequestMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RequestMUID");

                    b.ToTable("PolicyRequests");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Product", b =>
                {
                    b.Property<Guid>("ProductMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AnnualLimitOfCoverage")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double?>("Deductible")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("OutOfPocketLimit")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double>("PolicyPaidOffAmount")
                        .HasColumnType("float");

                    b.Property<double>("PolicyTotalAmount")
                        .HasColumnType("float");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductMUID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductMUID = new Guid("79b3d532-56bd-4ec8-811c-ade2445088cb"),
                            AnnualLimitOfCoverage = 14999.99,
                            Deductible = 100.25,
                            Description = "Lorus Plorem enum taknut",
                            OutOfPocketLimit = 999.99000000000001,
                            PolicyPaidOffAmount = 0.0,
                            PolicyTotalAmount = 10000.0,
                            Price = 2343.0,
                            ProductName = "DentalGold"
                        },
                        new
                        {
                            ProductMUID = new Guid("337e2116-7448-4d4c-84c1-7bef1fe8bfdb"),
                            AnnualLimitOfCoverage = 25999.990000000002,
                            Deductible = 200.15000000000001,
                            Description = "Enum Zelgar Phlnnub nilsup",
                            OutOfPocketLimit = 999.99000000000001,
                            PolicyPaidOffAmount = 0.0,
                            PolicyTotalAmount = 150000.0,
                            Price = 3343.0,
                            ProductName = "Health Platinum"
                        },
                        new
                        {
                            ProductMUID = new Guid("0ed8ff6d-fc5e-4a8f-ac54-109cdbeb27ea"),
                            AnnualLimitOfCoverage = 1345.99,
                            Deductible = 50.670000000000002,
                            Description = "Lorus Plorem enum taknut",
                            OutOfPocketLimit = 1200.45,
                            PolicyPaidOffAmount = 0.0,
                            PolicyTotalAmount = 2000.0,
                            Price = 789.0,
                            ProductName = "Eye Emerald"
                        },
                        new
                        {
                            ProductMUID = new Guid("b980874f-4978-4c19-b941-c66f1df8052d"),
                            AnnualLimitOfCoverage = 5345.9899999999998,
                            Deductible = 160.69,
                            Description = "Bupka ladna velnup halstus",
                            OutOfPocketLimit = 5600.4499999999998,
                            PolicyPaidOffAmount = 0.0,
                            PolicyTotalAmount = 100000.0,
                            Price = 1200.98,
                            ProductName = "Employee Individual Health"
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionMUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isPaymentComplete")
                        .HasColumnType("bit");

                    b.HasKey("TransactionMUID");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionMUID = new Guid("76098a5e-bcda-46be-9cf3-a19f24d14018"),
                            CustomerMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb"),
                            PaymentAmount = 1199.78,
                            PaymentDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1896),
                            PolicyMUID = new Guid("a61a15af-6a7d-4e82-9659-c5003721f5ea"),
                            isPaymentComplete = true
                        },
                        new
                        {
                            TransactionMUID = new Guid("530f62a1-8730-4784-bb71-a257136dd9f6"),
                            CustomerMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1"),
                            PaymentAmount = 2109.7800000000002,
                            PaymentDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1901),
                            PolicyMUID = new Guid("abdafd4a-48ff-4f1a-bcc6-fd3dd2c659a5"),
                            isPaymentComplete = true
                        },
                        new
                        {
                            TransactionMUID = new Guid("f752a2a0-7300-42ba-beab-dc65992ca945"),
                            CustomerMUID = new Guid("f71979e2-b649-4fbc-bc63-3bafa1d65176"),
                            PaymentAmount = 109.08,
                            PaymentDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1950),
                            PolicyMUID = new Guid("67bb56de-01c9-42e2-b066-eea2c082f06f"),
                            isPaymentComplete = false
                        },
                        new
                        {
                            TransactionMUID = new Guid("3287bca8-d9dc-4f75-94ca-227cfb4c72da"),
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            PaymentAmount = 189.05000000000001,
                            PaymentDate = new DateTime(2022, 12, 2, 9, 57, 48, 445, DateTimeKind.Local).AddTicks(1954),
                            PolicyMUID = new Guid("46c76123-4e2c-4cce-95fa-0646268c5b1d"),
                            isPaymentComplete = false
                        });
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BeneficiaryMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentEmployer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrentState")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CurrentZipcode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("CustomerMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimaryPolicyHolder")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("PolicyMUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SSN")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e17d266d-18e9-40a5-890a-87330384020f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBpAF4xseSzM1KgrC8GPufAoqxkGTp2ufDfB/oHdJKwBG1GQT9FoXjVwnaRjYVdMBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9147c756-a815-4db3-a935-ed38b36bc16c",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            Active = false,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "admin",
                            IsPrimaryPolicyHolder = false
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9393ea61-cd44-4ef4-8593-286465d2a5ac",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "CUSTOMER",
                            PasswordHash = "AQAAAAEAACcQAAAAEFGAmRRA+NDJzg+8bc75ATPcqTf3cq1SSS7F0yatBwfOW9vKa/xSYhJk2Rx1VhpY/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3022217c-0d14-486a-99e1-68aa566ef4be",
                            TwoFactorEnabled = false,
                            UserName = "customer",
                            Active = false,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "customer",
                            IsPrimaryPolicyHolder = false
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df5f1183-fd0b-49ac-a7a7-859187cc3f8f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BENEFICIARY",
                            PasswordHash = "AQAAAAEAACcQAAAAEK8MZ5JM8H2WgnvIkmhxVkEzVLhs1SxzxQotdr7W22IS0pn/W4+XKhAngmon0KH3KA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e57c631-c5e0-43a7-b51c-b2a8c3dc05c1",
                            TwoFactorEnabled = false,
                            UserName = "beneficiary",
                            Active = false,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "beneficiary",
                            IsPrimaryPolicyHolder = false
                        },
                        new
                        {
                            Id = "8769b938-a65f-4141-9e40-70beca51e382",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a424736-2d1c-4af7-9294-7e372b110f6b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PATO",
                            PasswordHash = "AQAAAAEAACcQAAAAEJC+Z6c58ynsvtY6Mjdglpj1Lk76L1vhYgLSYCs5EwguKIOFJjVILXwTDDnv4np5uw==",
                            PhoneNumber = "2019878709",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1df51be7-32c0-4467-95cd-62c0833a49d2",
                            TwoFactorEnabled = false,
                            UserName = "Pato",
                            Active = true,
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 476, DateTimeKind.Local).AddTicks(6033),
                            CurrentAddress = "123 Elm street",
                            CurrentCity = "Milwaukee",
                            CurrentEmployer = "Alphabet Corp",
                            CurrentState = "Wisconsin",
                            CurrentZipcode = "7897678",
                            CustomerMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "PatrickL@mymail.com",
                            FirstName = "Patrick",
                            Gender = "male",
                            IsPrimaryPolicyHolder = true,
                            LastName = "Leon",
                            LicenseNumber = "39kh8087hf",
                            PolicyMUID = new Guid("a61a15af-6a7d-4e82-9659-c5003721f5ea"),
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "477bef17-5d7a-4a10-b59f-b6b6ff801264",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cb937cb-e5d6-4981-b89c-2bcee6d25771",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ERICD@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKbwJwfdCiAYCMbEB+9TGRrQelvj3no+ppQ0687KBaKimXeaB5xMewa1+LB2X/rUxg==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eadb1191-1704-4b42-b73a-9c1cc917a097",
                            TwoFactorEnabled = false,
                            UserName = "EricD@mymail.com",
                            Active = true,
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 487, DateTimeKind.Local).AddTicks(3855),
                            CurrentAddress = "456 main street",
                            CurrentCity = "Baltimore",
                            CurrentEmployer = "Xillon Co",
                            CurrentState = "Maryland",
                            CurrentZipcode = "7897678",
                            CustomerMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "EricD@mymail.com",
                            FirstName = "Eric",
                            Gender = "male",
                            IsPrimaryPolicyHolder = true,
                            LastName = "Daley",
                            LicenseNumber = "39kh8087hf",
                            PolicyMUID = new Guid("abdafd4a-48ff-4f1a-bcc6-fd3dd2c659a5"),
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "e94548ba-dafc-44be-9e41-dc7d71b7c588",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6c22c8b-2050-4437-acb4-a749fba24573",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "NIKOSIT@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEChzVPCr1WKjxKDbIo63Rw1gOxutplgL8DmXKVjB0WDnvUCm/igpZHE6eQVqmVVzCg==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20e137cd-49b4-4c36-af59-fe07d7e4a746",
                            TwoFactorEnabled = false,
                            UserName = "NikosiT@mymail.com",
                            Active = true,
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 501, DateTimeKind.Local).AddTicks(2607),
                            CurrentAddress = "789 Grove street",
                            CurrentCity = "Rockville",
                            CurrentEmployer = "techumseh International",
                            CurrentState = "Maryland",
                            CurrentZipcode = "7897678",
                            CustomerMUID = new Guid("f71979e2-b649-4fbc-bc63-3bafa1d65176"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "NikosiT@mymail.com",
                            FirstName = "Nikosi",
                            Gender = "female",
                            IsPrimaryPolicyHolder = true,
                            LastName = "Thom",
                            LicenseNumber = "39kh8087hf",
                            PolicyMUID = new Guid("67bb56de-01c9-42e2-b066-eea2c082f06f"),
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "5e7d78de-76fb-479e-a2e1-d8886e46b311",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4eef866c-6b68-466a-a397-ec8a3340b350",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "LEONAW@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB8gCAgA8218GRvNnIvyBQFQlSharA7Eb4ykq3b8XhpQNvb7NvSI0i1tg0BSvxyHmw==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a45ccfa-46be-42dd-acc7-84aed4de567e",
                            TwoFactorEnabled = false,
                            UserName = "LeonaW@mymail.com",
                            Active = true,
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 516, DateTimeKind.Local).AddTicks(1203),
                            CurrentAddress = "3464 Brinkly street",
                            CurrentCity = "Gathersburg",
                            CurrentEmployer = "Brimson distributers",
                            CurrentState = "Maryland",
                            CurrentZipcode = "7897678",
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "LeonaW@mymail.com",
                            FirstName = "Leona",
                            Gender = "female",
                            IsPrimaryPolicyHolder = true,
                            LastName = "Wilson",
                            LicenseNumber = "39kh8087hf",
                            PolicyMUID = new Guid("46c76123-4e2c-4cce-95fa-0646268c5b1d"),
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "4c26a4cf-1364-4ed6-b8e6-8e1e23c1794e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64dbd106-ca16-447e-b0c6-c552972bf9cf",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ANDREAB@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPsZnfrayhkW3PvML9DKhXKAx/Nwva8JZh5ewApUxCjFdJWLWTF43c9cZAmrKF5Flw==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5a56014-3357-441f-b8af-3141bd9a49dc",
                            TwoFactorEnabled = false,
                            UserName = "AndreaB@mymail.com",
                            Active = true,
                            BeneficiaryMUID = new Guid("6808f1f0-47c1-4136-b775-b1f6ffc541fd"),
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 528, DateTimeKind.Local).AddTicks(1574),
                            CustomerMUID = new Guid("7e46ae9d-ff19-47da-ae69-922069555efb"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "AndreaB@mymail.com",
                            FirstName = "Andrea",
                            Gender = "female",
                            IsPrimaryPolicyHolder = false,
                            LastName = "Bogataw",
                            LicenseNumber = "39kh8087hf",
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "161f8c40-6362-4725-b74d-21c627686d91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6cee1bf-c135-44d6-9351-3f5445b68cc7",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "CYNTHIAS@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDFKBqUAn1oixJIKY7i4Nk1mgVx0mu8nAEDEcHSct91sgyPyQWC/zpZCoy6zlCPBOg==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eaab486f-724d-46c9-98c9-f252933cf762",
                            TwoFactorEnabled = false,
                            UserName = "CynthiaS@mymail.com",
                            Active = true,
                            BeneficiaryMUID = new Guid("54d5eae1-ee39-4f2d-8535-5f610d2e1cff"),
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 536, DateTimeKind.Local).AddTicks(9524),
                            CustomerMUID = new Guid("0d7a4ff8-5b33-44bf-a0fe-bd0f696187f1"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "CynthiaS@mymail.com",
                            FirstName = "Cynthia",
                            Gender = "female",
                            IsPrimaryPolicyHolder = false,
                            LastName = "Smithers",
                            LicenseNumber = "39k8ew8087hf",
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "2db7ddd2-579e-4975-870b-b111412db610",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96ecfaf9-3397-4bdc-bdd2-046a988e909b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BRITNEYG@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECjD55kemhrtTX+khfDLd/K5N+rIcCDyKZdY6/oq6OTqTvb65XP+gNCUw/6rZer3FA==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c12c77e4-da48-4f34-b3e9-0118e3be4058",
                            TwoFactorEnabled = false,
                            UserName = "BritneyG@mymail.com",
                            Active = true,
                            BeneficiaryMUID = new Guid("78d9cd41-acde-48fc-baa9-29b5065af159"),
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 546, DateTimeKind.Local).AddTicks(3348),
                            CustomerMUID = new Guid("f71979e2-b649-4fbc-bc63-3bafa1d65176"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "BritneyG@mymail.com",
                            FirstName = "Brittney",
                            Gender = "female",
                            IsPrimaryPolicyHolder = false,
                            LastName = "Giles",
                            LicenseNumber = "39k8ew8087hf",
                            SSN = "123456789"
                        },
                        new
                        {
                            Id = "9b0f37ab-5f26-41d0-b6d5-2b81b045b46f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc3672c0-a27d-4f12-9d74-1cb1a7fadb9f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JOANAM@MYMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMZmYlGYPUN2p1OGRDtVvEjB2GPDBKwL2AtmRPlKOIgPzdeU4yvkbs71l0DniuSN/Q==",
                            PhoneNumber = "8790985467",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6d7eaef-f00d-4b37-895f-c2a68a77ec79",
                            TwoFactorEnabled = false,
                            UserName = "JoanaM@mymail.com",
                            Active = true,
                            BeneficiaryMUID = new Guid("fa75877d-66a1-4f63-b8fa-d2cdb59fbdd1"),
                            CreatedDate = new DateTime(2022, 12, 2, 9, 57, 48, 555, DateTimeKind.Local).AddTicks(5275),
                            CustomerMUID = new Guid("3498cdd0-6913-4c08-b29f-5291f28201ce"),
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "JoanaM@mymail.com",
                            FirstName = "Joana",
                            Gender = "female",
                            IsPrimaryPolicyHolder = false,
                            LastName = "Martin",
                            LicenseNumber = "39k8ew8087hf",
                            SSN = "123456789"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Beneficiary", b =>
                {
                    b.HasOne("NJInsurancePlatform.Models.Transaction", null)
                        .WithMany("ListOfPolicyBeneficiariesMUIDs")
                        .HasForeignKey("TransactionMUID");
                });

            modelBuilder.Entity("NJInsurancePlatform.Models.Transaction", b =>
                {
                    b.Navigation("ListOfPolicyBeneficiariesMUIDs");
                });
#pragma warning restore 612, 618
        }
    }
}
